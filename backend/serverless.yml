service:
  name: serverless-ems-app

plugins:
  - serverless-webpack
  - serverless-reqvalidator-plugin
  - serverless-aws-documentation
  - serverless-iam-roles-per-function
  - serverless-dynamodb-local
  - serverless-offline

provider:
  name: aws
  runtime: nodejs12.x

  stage: ${opt:stage, 'dev'}
  region: ${opt:region, 'us-east-1'}

  tracing:
    lambda: true
    apiGateway: true

  environment:
    DEPARTMENTS_TABLE: Departments-${self:provider.stage}
    EMPLOYEES_TABLE: Employees-${self:provider.stage}
    DEPARTMENT_ID_INDEX: DepartmentIdIndex
    EMPLOYMENT_DATE_INDEX: EmploymentDateIndex
    ATTACHMENTS_BUCKET: serverless-employees-attachments-url-${self:provider.stage}-${self:provider.region}
  
  iamRoleStatements:
    - Effect: Allow
      Action:
        - "xray:PutTraceSegments"
        - "xray:PutTelemetryRecords"
      Resource:
        - "*"
    - Effect: Allow
      Action:
        - logs:CreateLogStream
        - logs:CreateLogGroup
        - logs:PutLogEvents
      Resource: '*'
    
custom:
  serverless-offline:
    httpPort: 3003

  dynamodb:
    stages:
      - ${self:provider.stage}
    start:
      port: 8000
      inMemory: true
      migrate: true
      seed: true
    seed:
      domain:
        sources:
          - table: ${self:provider.environment.DEPARTMENTS_TABLE}
            sources: [./offline/migrations/departments.json]
          - table: ${self:provider.environment.EMPLOYEES_TABLE}
            sources: [./offline/migrations/employees.json]
  
  documentation:
    api:
      info:
        version: v1.0.0
        title: EMS API
        description: Serverless EMS application
    models:
      - name: CreateDepartmentRequest
        contentType: application/json
        schema: ${file(./src/models/validators/create-department-request.json)}
      - name: UpdateDepartmentRequest
        contentType: application/json
        schema: ${file(./src/models/validators/update-department-request.json)}
      - name: CreateEmployeeRequest
        contentType: application/json
        schema: ${file(./src/models/validators/create-employee-request.json)}
      - name: UpdateEmployeeRequest
        contentType: application/json
        schema: ${file(./src/models/validators/update-employee-request.json)}

functions:

  Auth:
    handler: src/lambda/auth/auth0Authorizer.handler
    iamRoleStatementsInherit: true 

  GetEmployees:
    handler: src/lambda/http/getEmployees.handler
    events:
      - http:
          method: get
          path: departments/{departmentId}/employees
          cors: true
          authorizer: Auth
    iamRoleStatementsInherit: true      
    iamRoleStatementsName: get-employee-role-function
    iamRoleStatements:
      - Effect: Allow 
        Action:
          - dynamodb:Query
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.EMPLOYEES_TABLE}
      - Effect: Allow 
        Action:
          - dynamodb:Query
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.EMPLOYEES_TABLE}/index/${self:provider.environment.EMPLOYMENT_DATE_INDEX}

  CreateEmploye:
    handler: src/lambda/http/createEmployee.handler
    events:
      - http:
          method: post
          path: employees
          cors: true
          authorizer: Auth
          reqValidatorName: RequestBodyValidator
          documentation:
            summary: Create a new employee
            description: Create a new employee
            requestModels:
              'application/json': CreateEmployeeRequest
    iamRoleStatementsInherit: true 
    iamRoleStatementsName: create-employee-role-function
    iamRoleStatements:
      - Effect: Allow 
        Action: 
          - dynamodb:Query
          - dynamodb:PutItem 
          - dynamodb:UpdateItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.EMPLOYEES_TABLE}
      - Effect: Allow
        Action: [ s3:PutObject ]
        Resource: arn:aws:s3:::${self:provider.environment.ATTACHMENTS_BUCKET}/*

  DeleteEmployee:
    handler: src/lambda/http/deleteEmployee.handler
    events:
      - http:
          method: delete
          path: employees/{employeeId}
          cors: true
          authorizer: Auth
    iamRoleStatementsInherit: true
    iamRoleStatementsName: delete-employee-role-function
    iamRoleStatements:
      - Effect: Allow 
        Action:
          - dynamodb:Query
          - dynamodb:DeleteItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.EMPLOYEES_TABLE}
  
  GetDepartments:
    handler: src/lambda/http/getDepartments.handler
    events:
      - http:
          method: get
          path: departments
          cors: true
          authorizer: Auth
    iamRoleStatementsInherit: true      
    iamRoleStatementsName: get-department-role-function
    iamRoleStatements:
      - Effect: Allow 
        Action:
          - dynamodb:Query
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.DEPARTMENTS_TABLE}

  CreateDepartment:
    handler: src/lambda/http/createDepartment.handler
    events:
      - http:
          method: post
          path: departments
          cors: true
          authorizer: Auth
          reqValidatorName: RequestBodyValidator
          documentation:
            summary: Create a new department
            description: Create a new department
            requestModels:
              'application/json': CreateDepartmentRequest
    iamRoleStatementsInherit: true 
    iamRoleStatementsName: create-department-role-function
    iamRoleStatements:
      - Effect: Allow 
        Action: 
          - dynamodb:Query
          - dynamodb:PutItem 
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.DEPARTMENTS_TABLE}

resources:
  Resources:
    GatewayResponseDefault4XX:
      Type: AWS::ApiGateway::GatewayResponse
      Properties:
        ResponseParameters:
          gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
          gatewayresponse.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
          gatewayresponse.header.Access-Control-Allow-Methods: "'GET,OPTIONS,POST'"
        ResponseType: DEFAULT_4XX
        RestApiId:
          Ref: ApiGatewayRestApi
    
    #Departments Table
    DepartmentsDynamoDBTable:
      Type: AWS::DynamoDB::Table
      Properties:
        AttributeDefinitions:
          - AttributeName: userId
            AttributeType: S
          - AttributeName: departmentId
            AttributeType: S
        KeySchema:
          - AttributeName: userId
            KeyType: HASH
          - AttributeName: departmentId
            KeyType: RANGE
        BillingMode: PAY_PER_REQUEST
        TableName: ${self:provider.environment.DEPARTMENTS_TABLE}
    
    #Employees Table
    EmployeesDynamoDBTable:
      Type: AWS::DynamoDB::Table
      Properties:
        AttributeDefinitions:
          - AttributeName: userId
            AttributeType: S
          - AttributeName: employeeId
            AttributeType: S
          - AttributeName: departmentId
            AttributeType: S
          - AttributeName: employmentDate
            AttributeType: S
        KeySchema:
          - AttributeName: userId
            KeyType: HASH
          - AttributeName: employeeId
            KeyType: RANGE
        BillingMode: PAY_PER_REQUEST
        TableName: ${self:provider.environment.EMPLOYEES_TABLE}
        LocalSecondaryIndexes:
          - IndexName: ${self:provider.environment.DEPARTMENT_ID_INDEX}
            KeySchema:
              - AttributeName: userId
                KeyType: HASH
              - AttributeName: departmentId
                KeyType: RANGE
            Projection:
              ProjectionType: ALL # What attributes will be copied to an index
          - IndexName: ${self:provider.environment.EMPLOYMENT_DATE_INDEX}
            KeySchema:
              - AttributeName: userId
                KeyType: HASH
              - AttributeName: employmentDate
                KeyType: RANGE
            Projection:
              ProjectionType: ALL # What attributes will be copied to an index
            
    RequestBodyValidator:
      Type: AWS::ApiGateway::RequestValidator
      Properties:
        Name: 'request-body-validator'
        RestApiId:
          Ref: ApiGatewayRestApi
        ValidateRequestBody: true
        ValidateRequestParameters: false

    AttachmentsBucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:provider.environment.ATTACHMENTS_BUCKET}
        CorsConfiguration:
          CorsRules:
            -
              AllowedOrigins:
                - '*'
              AllowedHeaders:
                - '*'
              AllowedMethods:
                - GET 
                - PUT 
                - POST                 
                - DELETE
                - HEAD 
              MaxAge: 3000
    BucketPolicy:
      Type: AWS::S3::BucketPolicy
      Properties:
        Bucket: !Ref AttachmentsBucket
        PolicyDocument: 
          Version: '2012-10-17'
          Statement:
          - Sid: PublicReadForGetBucketObjects
            Effect: Allow
            Principal: '*'
            Action: 's3:GetObject'           
            Resource: arn:aws:s3:::${self:provider.environment.ATTACHMENTS_BUCKET}/*
            


    